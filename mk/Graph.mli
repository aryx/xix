(*s: Graph.mli *)
(*s: type [[Graph.node (Graph.mli)]] *)
type node = {
  name : string;
  mutable arcs : arc list;
  mutable time : float option;
  mutable state : build_state;
  mutable is_virtual : bool;
  mutable visited : bool;
  mutable probable : bool;
}
(*e: type [[Graph.node (Graph.mli)]] *)

(*s: type [[Graph.arc (Graph.mli)]] *)
and arc = { dest : node option; rule : Rules.rule_exec }
(*e: type [[Graph.arc (Graph.mli)]] *)
(*s: type [[Graph.build_state (Graph.mli)]] *)
and build_state = NotMade | BeingMade | Made
(*e: type [[Graph.build_state (Graph.mli)]] *)

(*s: type [[Graph.t (Graph.mli)]] *)
type t = node (* the root *)
(*e: type [[Graph.t (Graph.mli)]] *)

(*s: signature [[Graph.hnodes]] *)
val hnodes : (string, node) Hashtbl.t
(*e: signature [[Graph.hnodes]] *)

(*s: signature [[Graph.build_graph]] *)
(* !will also modify hnode! *)
val build_graph : string (* target *) -> Rules.rules -> t
(*e: signature [[Graph.build_graph]] *)

(*s: signature [[Graph.update]] *)
(* update time of node once the target node has been generated by a job *)
val update : node -> unit
(*e: signature [[Graph.update]] *)

(*s: signature [[Graph.check_cycle]] *)
(* internals *)
val check_cycle : t -> unit
(*e: signature [[Graph.check_cycle]] *)

(*s: signature [[Graph.check_ambiguous]] *)
(* will also adjust the graph *)
val check_ambiguous : t -> unit
(*e: signature [[Graph.check_ambiguous]] *)

(*s: signature [[Graph.dump_graph]] *)
(* output graphviz dot file *)
val dump_graph : t -> unit
(*e: signature [[Graph.dump_graph]] *)
(*e: Graph.mli *)
