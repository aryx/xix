# -*- org -*-

* TODO

** rc/mk
TODO Can use rc/mk on principia and build and syncweb as well Editor.nw
     (efuns), Codemap.nw

** internals
TODO Testing library using Testo? (only built and run on 4.14.0) or
 do poor's man version again? or just use ounit?

** devops

TODO? started to use Nix to define the development environment for Xix?
TODO? switch to precommit and ocamlformat? (but avoid lex/ yacc/ because of syncweb)
TODO more semgrep rules (forbid functors, labels, etc.)
LATER compile again for ocaml light (my own fork of caml-special-light 1.07)

* 0.15 (Q2 2025) (Dockerfile (devops))
# Resume again after one year of inactivity due to my work for Semgrep.
# Bring again good stuff I learned from semgrep:
#  - Dockerfile (and GHA) for reproducible tangible build instructions
#  - ppx_deriving
#  - Fpath.t (instead of Common.filename)
#  - capabilities!!
#  - TODO ocamlformat

** internals

- Start use ppx_deriving (which then require OCaml 4.09.1 but
  it should be doable to implement a poor's man deriving in ocaml light)
- Copy Cap.ml from semgrep and start using capabilities (and
  augmented semgrep.jsonnet to forbid Sys.xxx) (which then requires OCaml 4.0x
  but again it should be doable to just skip any object constructs in ocaml light
  as capabilities are just a typechecking thing without runtime impact).
- Start use poor's man Fpath.ml instead of Common.filename
- Start use capitalized module for lib_core/commons/ and mk/ (thx Martin)

** devops

- Dockerfile (Ubuntu because Alpine is failing for old OCaml versions)

* 0.14 (Q2 2024) (Works again, Logging, Testing, CI)

** mk works again (but need plan9 (a.k.a. 9base) rc)

** internals

- Logging using poor's man Logs.ml

* 0.13 (Q1 2024) (CI build and test and semgrep checks (devops))
# Resume after long hiatus (2019-2023) due to our move to Italy,
# the birth of Nathalie, and especially my work for Semgrep.
# Bring again good stuff I learned from semgrep:
#  - GHA and CI regression testing
#  - Logs
#  - Semgrep checks (and semgrep.jsonnet)
#  - tests

** internals

- Started to use stdcompat for backward compatibility with
  old versions of OCaml.

** devops

- Github Actions (GHA) checks to make sure xix compiles.
  At least it compiles with 3.10.0 (thx to stdcompat), 4.04.0, 4.14.0,
  and even 5.1.0!
- first semgrep checks in semgrep.jsonnet :) and semgrep GHA workflow.
- some basic tests (also enforced in GHA) in test.sh

* -----------------------------------------------------------

* Big pause to work on semgrep for 2019/2020/2021/2022/2023

* -----------------------------------------------------------


* 0.12 (Q4 2018) ()
# Move to Italy

* 0.11 (Q3 2018) (lib_gui?)

internals: use of merlin (mk .merlin) via Efuns

* 0.10 (Q2 2018) ()

* 0.9 (Q1 2018) ()
# GioGio at home a lot, big ear infections

(work on syncweb -web_to_tex and code indexing)

* -----------------------------------------------------------

* 0.8 (Q4 2017) (git algorithms)

diff3.ml
simpler diff_myers.ml

* 0.7 (Q3 2017) (git)

port of dulwich and ocaml-git, 2 clones of git, to ocaml(light).

Simplify code in ocaml-git by not using functors/lwt/mstruct/... 
and complete with new code derived from dulwich (clone of git in python)
or from entirely new code for the features not implemented by dulwich.


* 0.6 (Q2 2017) (rio and libdraw, import lib_core, lib_system)

port of rio using ocaml threads but relying on the original plan9 kernel.
basic terminal emulator.

port of libdraw, the userspace part, again relying on the original plan9 kernel
(draw/, geometry/, input/, and basic ui/ for menus)

binding to plan9 mount/bind and port of 9P protocol to ocaml (for rio)
(lib_system/)

import stdlib and organize better lib_core/ (collections/, string/, etc).

port more of the kernel C code to ocaml 
(core DS, concurrency, memory, process, interrupts, virtual memory,
scheduling, and timing chapters).

started lib_core/ 

* 0.5 (Q1 2017) (kernel start)
# Giogio birth!

minimal C kernel for Raspberry Pi (boot, malloc, libc, print) by
 selecting subset of 9/bcm/ and 9/port in plan9

minimal ocaml hello world linked in kernel
 by linking the byterun interpreter from ocaml light 1.07 to the
 minimal C kernel (incorporate more libc)

* -----------------------------------------------------------

* 0.4 (Q4 2016) (5c typechecker and basic code generator)

finish cpp
finish first port of 5c (typechecker and basic code generator)

* 0.3 (Q3 2016) (mk, rc, 5c parser, cpp)

port of mk
port of rc
port of 5c (just parser and dumper)
port of cpp

* 0.2 (Q2 2016) ()

* 0.1 (Q1 2016) (5l)

start of repository, mkfiles, skeleton

port of 5l
finish 5a

* -----------------------------------------------------------

* Alpha (Dec 2015) (5a + lex/yacc import)

port of 5a
import of yacc that I ported in may 2015
import of lex from OCaml.
import of lib_parsing/ from the modifications I made to lex and yacc.
