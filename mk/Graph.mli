type node = {
  name : string;
  mutable arcs : arc list;
  mutable time : float option;
  mutable state : build_state;
  mutable is_virtual : bool;
  mutable visited : bool;
  mutable probable : bool;
}

and arc = { dest : node option; rule : Rules.rule_exec }
and build_state = NotMade | BeingMade | Made

type t = node (* the root *)

val hnodes : (string, node) Hashtbl.t

(* !will also modify hnode! *)
val build_graph : string (* target *) -> Rules.rules -> t

(* update time of node once the target node has been generated by a job *)
val update : node -> unit

(* internals *)
val check_cycle : t -> unit

(* will also adjust the graph *)
val check_ambiguous : t -> unit

(* output graphviz dot file *)
val dump_graph : t -> unit
