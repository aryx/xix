\chapter{Extra Code}

\section{[[shell/]]}

\subsection*{[[Ast.ml]]}

%-------------------------------------------------------------

<<shell/Ast.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)

(* for boostrap-mk.sh and ocaml-light to work without deriving *)
let show_cmd _ = "NO DERIVING"
[@@warning "-32"]
let show_value _ = "NO DERIVING"
[@@warning "-32"]
let show_cmd_sequence _ = "NO DERIVING"
[@@warning "-32"]
let show_line _ = "NO DERIVING"
[@@warning "-32"]

<<type [[Ast.value]]>>
<<type [[Ast.values]]>>

<<type [[Ast.cmd]]>>
<<type [[Ast.cmd_sequence]]>>

(* todo: RDup does not have a filename? so push value inside RWrite of value*)
<<type [[Ast.redirection]]>>
<<type [[Ast.redirection_kind]]>>
[@@deriving show]

<<type [[Ast.line]]>>
[@@deriving show]
@

\subsection*{[[Builtin.ml]]}

%-------------------------------------------------------------

<<shell/Builtin.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)
open Common

module R = Runtime
module E = Error
module O = Opcode

<<function [[Builtin.is_builtin]]>>
<<constant [[Builtin.ndots]]>>
<<function [[Builtin.dochdir]]>>
<<constant [[Builtin.dotcmds]]>>
<<function [[Builtin.dispatch]]>>
@

\subsection*{[[CLI.ml]]}

%-------------------------------------------------------------

<<shell/CLI.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)

open Common
open Fpath_.Operators

module R = Runtime
module O = Opcode

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* An OCaml port of rc, the Plan 9 shell.
 *
 * Main limitations compared to rc:
 *  - no unicode support
 *  - not all of the fancy redirections and fancy pipes
 *  - no storing of functions in the environment
 *    (used by rcmain. But can do the same by using '. rcmain')
 * 
 * Improvements (IMHO):
 *  - a strict mode where we report when deleting undefined function
 *  - Logs with errors and warnings and debug
 *  - more?
 * 
 * todo:
 *  - read environment variables and export variables
 *  - globbing
 *  - Isatty rc -i detection
 *  - add ~ shortcut for HOME (from csh?)
 *  - rc -c
 *)

(*****************************************************************************)
(* Types and constants *)
(*****************************************************************************)

<<type [[CLI.caps]]>>

(* -d and -p are dead according to man page so I removed them *)
<<constant [[CLI.usage]]>>

(*****************************************************************************)
(* Testing *)
(*****************************************************************************)

<<function [[CLI.do_action]]>>

(*****************************************************************************)
(* Main algorithm *)
(*****************************************************************************)

<<constant [[CLI._bootstrap_simple]]>>
<<function [[CLI.bootstrap]]>>

<<function [[CLI.interpret_bootstrap]]>>

(*****************************************************************************)
(* Entry point *)
(*****************************************************************************)

<<function [[CLI.main]]>>
@

\subsection*{[[Compile.ml]]}

%-------------------------------------------------------------

<<shell/Compile.ml>>=
open Common

module A = Ast
module O = Opcode

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* AST to opcodes.
*)

(*****************************************************************************)
(* Helpers *)
(*****************************************************************************)

<<function [[Compile.split_at_non_assign]]>>
<<function [[Compile.split_when_case]]>>

(*****************************************************************************)
(* Compilation algorithm *)
(*****************************************************************************)

<<function [[Compile.outcode_seq]]>>

(*****************************************************************************)
(* Entry point *)
(*****************************************************************************)

<<function [[Compile.compile]]>>
@

\subsection*{[[Env.ml]]}

%-------------------------------------------------------------

<<shell/Env.ml>>=
@

\subsection*{[[Error.ml]]}

%-------------------------------------------------------------

<<shell/Error.ml>>=
module R = Runtime

<<function [[Error.error]]>>
@

\subsection*{[[Flags.ml]]}

%-------------------------------------------------------------

<<shell/Flags.ml>>=
open Common

<<constant [[Flags.interactive]]>>
<<constant [[Flags.login]]>>

<<constant [[Flags.eflag]]>>
<<constant [[Flags.rflag]]>>
<<constant [[Flags.sflag]]>>
<<constant [[Flags.xflag]]>>

(* less: let cflag = ref "" *)

<<global [[Flags.hflags]]>>

<<constant [[Flags.rcmain]]>>

(* pad: I added this one *)
<<constant [[Flags.strict_mode]]>>

<<constant [[Flags.dump_tokens]]>>
<<constant [[Flags.dump_ast]]>>
<<constant [[Flags.dump_opcodes]]>>

<<constant [[Flags.debugger]]>>
@


\subsection*{[[Fn.ml]]}

%-------------------------------------------------------------

<<shell/Fn.ml>>=
module R = Runtime

<<function [[Fn.flook]]>>
@

\subsection*{[[Glob.ml]]}

%-------------------------------------------------------------

<<shell/Glob.ml>>=
@

\subsection*{[[Globals.ml]]}

<<constant [[Globals.eflagok]]>>=
(* this is set after the first . of rcmain *)
let eflagok = ref false
@

%-------------------------------------------------------------

<<shell/Globals.ml>>=

<<constant [[Globals.skipnl]]>>
<<constant [[Globals.errstr]]>>

<<constant [[Globals.ifnot]]>>
<<constant [[Globals.eflagok]]>>
@

\subsection*{[[Heredoc.ml]]}

%-------------------------------------------------------------

<<shell/Heredoc.ml>>=
@


\subsection*{[[Interpreter.ml]]}

%-------------------------------------------------------------

<<shell/Interpreter.ml>>=
open Common

module O = Opcode
module R = Runtime
module E = Error

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)

(*****************************************************************************)
(* Helpers *)
(*****************************************************************************)

<<function [[Interpreter.file_descr_of_int]]>>
<<function [[Interpreter.int_at_address]]>>

<<function [[Interpreter.vlook_varname_or_index]]>>

(*****************************************************************************)
(* Entry point *)
(*****************************************************************************)

<<function [[Interpreter.interpret_operation]]>>
@

\subsection*{[[Main.ml]]}

%-------------------------------------------------------------

<<shell/Main.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)
open Xix_shell

(*****************************************************************************)
(* Entry point *)
(*****************************************************************************)

<<toplevel [[Main._1]]>>
@

\subsection*{[[Op_process.ml]]}

%-------------------------------------------------------------

<<shell/Op_process.ml>>=
open Fpath_.Operators

module R = Runtime
module E = Error

<<function [[Op_process.execute]]>>

<<function [[Op_process.exec]]>>

<<function [[Op_process.forkexec]]>>

<<function [[Op_process.op_Simple]]>>
@


\subsection*{[[Op_repl.ml]]}

%-------------------------------------------------------------

<<shell/Op_repl.ml>>=

module R = Runtime

<<function [[Op_repl.op_REPL]]>>
@

\subsection*{[[Opcode.ml]]}

%-------------------------------------------------------------

<<shell/Opcode.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)

(* for boostrap-mk.sh and ocaml-light to work without deriving *)
let show _ = "NO DERIVING"
[@@warning "-32"]
let show_codevec _ = "NO DERIVING"
[@@warning "-32"]

<<type [[Opcode.operation]]>>
[@@deriving show]
<<type [[Opcode.opcode]]>>
[@@deriving show]
<<type [[Opcode.codevec]]>>
[@@deriving show]
@

\subsection*{[[PATH.ml]]}

%-------------------------------------------------------------

<<shell/PATH.ml>>=
open Common
open Fpath_.Operators

module R = Runtime

<<function [[PATH.search_path_for_cmd]]>>
<<function [[PATH.find_in_path]]>>
@

\subsection*{[[Lexer.mli]]}

%-------------------------------------------------------------

<<Lexer.mli>>=
<<signature [[Lexer.token]]>>

<<exception [[Lexer.Lexical_error]]>>
@

\subsection*{[[Lexer.mll]]}

%-------------------------------------------------------------

\subsection*{[[Parser.mly]]}


\subsection*{[[Parse.ml]]}

%-------------------------------------------------------------

<<shell/Parse.ml>>=
(* Copyright 2016 Yoann Padioleau, see copyright.txt *)
open Common

module R = Runtime

<<function [[Parse.error]]>>

<<function [[Parse.parse_line]]>>
@


\subsection*{[[Pattern.ml]]}

<<type [[Pattern.pattern]]>>=
type pattern = string
@

<<function [[Pattern.match_str]]>>=
(* todo: handle [ * ?  *)
let match_str s1 s2 =
  s1 = s2
@

%-------------------------------------------------------------

<<shell/Pattern.ml>>=

<<type [[Pattern.pattern]]>>

<<function [[Pattern.match_str]]>>
@

\subsection*{[[Process.ml]]}

%-------------------------------------------------------------

<<shell/Process.ml>>=
open Common

module R = Runtime

<<function [[Process.s_of_unix_error]]>>

<<function [[Process.exit]]>>

<<function [[Process.return]]>>


<<type [[Process.waitfor_result]]>>

<<function [[Process.waitfor]]>>
@

\subsection*{[[Prompt.ml]]}

%-------------------------------------------------------------

<<shell/Prompt.ml>>=
module R = Runtime

<<constant [[Prompt.doprompt]]>>
<<constant [[Prompt.prompt]]>>

<<function [[Prompt.pprompt]]>>
@

\subsection*{[[Runtime.ml]]}

%-------------------------------------------------------------

<<shell/Runtime.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* Globals used by rc during interpretation.
 *)

(*****************************************************************************)
(* Types and globals *)
(*****************************************************************************)

<<type [[Runtime.varname]]>>
<<type [[Runtime.value]]>>
<<type [[Runtime.var]]>>

(* for boostrap-mk.sh and ocaml-light to work without deriving *)
let show_fn _ = "NO DERIVING"
[@@warning "-32"]

<<type [[Runtime.fn]]>>
[@@deriving show]

<<type [[Runtime.thread]]>>

<<type [[Runtime.redir]]>>

<<type [[Runtime.waitstatus]]>>

<<global [[Runtime.globals]]>>

<<global [[Runtime.fns]]>>

(* less: argv0 *)

<<constant [[Runtime.runq]]>>

(*****************************************************************************)
(* cur *)
(*****************************************************************************)

<<function [[Runtime.cur]]>>

(*****************************************************************************)
(* Stack (argv) API *)
(*****************************************************************************)

<<function [[Runtime.push_list]]>>
<<function [[Runtime.pop_list]]>>

<<function [[Runtime.push_word]]>>
<<function [[Runtime.pop_word]]>>

(*****************************************************************************)
(* Redirection *)
(*****************************************************************************)

<<function [[Runtime.push_redir]]>>
<<function [[Runtime.pop_redir]]>>

<<function [[Runtime.turf_redir]]>>

<<function [[Runtime.doredir]]>>

(*****************************************************************************)
(* Constructor *)
(*****************************************************************************)

<<function [[Runtime.mk_thread]]>>

(*****************************************************************************)
(* Misc *)
(*****************************************************************************)
let string_of_var (var : var) : string =
  match var.v with
  | None -> ""
  | Some [] -> ""
  | Some [x] -> x
  | Some xs -> "(" ^ String.concat " " xs ^ ")"

@


\subsection*{[[Status.ml]]}

%-------------------------------------------------------------

<<shell/Status.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)
open Common

module R = Runtime

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* Small helpers to manipulate the "status" special variable (see Var.ml) *)

(*****************************************************************************)
(* API *)
(*****************************************************************************)

<<function [[Status.setstatus]]>>
<<function [[Status.getstatus]]>>
<<function [[Status.concstatus]]>>
<<function [[Status.truestatus]]>>
@

\subsection*{[[Var.ml]]}

%-------------------------------------------------------------

<<shell/Var.ml>>=
(* Copyright 2016, 2025 Yoann Padioleau, see copyright.txt *)

module R = Runtime

(*****************************************************************************)
(* Prelude *)
(*****************************************************************************)
(* Helpers to manipulate rc shell variables *)

(*****************************************************************************)
(* API *)
(*****************************************************************************)

<<function [[Var.gvlook]]>>
<<function [[Var.vlook]]>>

<<function [[Var.setvar]]>>

<<function [[Var.vinit]]>>
@


\subsection*{[[Builtin.mli]]}

%-------------------------------------------------------------

<<Builtin.mli>>=
<<signature [[Builtin.is_builtin]]>>

<<signature [[Builtin.dispatch]]>>
@

\subsection*{[[CLI.mli]]}

%-------------------------------------------------------------

<<CLI.mli>>=

<<type [[CLI.caps]]>>

<<signature [[CLI.main]]>>

(* internals *)
<<signature [[CLI.interpret_bootstrap]]>>
@

\subsection*{[[Compile.mli]]}

%-------------------------------------------------------------

<<Compile.mli>>=
<<signature [[Compile.compile]]>>
@

\subsection*{[[Env.mli]]}

%-------------------------------------------------------------

<<Env.mli>>=
@

\subsection*{[[Error.mli]]}

%-------------------------------------------------------------

<<Error.mli>>=
<<signature [[Error.error]]>>
@

\subsection*{[[Fn.mli]]}

%-------------------------------------------------------------

<<Fn.mli>>=
<<signature [[Fn.flook]]>>
@

\subsection*{[[Glob.mli]]}

%-------------------------------------------------------------

<<Glob.mli>>=
@

\subsection*{[[Heredoc.mli]]}

%-------------------------------------------------------------

<<Heredoc.mli>>=
@

\subsection*{[[Interpreter.mli]]}

%-------------------------------------------------------------

<<Interpreter.mli>>=
<<signature [[Interpreter.interpret_operation]]>>
@

\subsection*{[[PATH.mli]]}

%-------------------------------------------------------------

<<PATH.mli>>=
<<signature [[PATH.find_in_path]]>>

<<signature [[PATH.search_path_for_cmd]]>>
@

\subsection*{[[Parse.mli]]}

%-------------------------------------------------------------

<<Parse.mli>>=
<<signature [[Parse.parse_line]]>>
@

\subsection*{[[Pattern.mli]]}

<<signature [[Pattern.match_str]]>>=
val match_str : string -> pattern -> bool
@

%-------------------------------------------------------------

<<Pattern.mli>>=
(* todo: Glob char *)
<<type [[Pattern.pattern]]>>

<<signature [[Pattern.match_str]]>>
@

\subsection*{[[Process.mli]]}

%-------------------------------------------------------------

<<Process.mli>>=
<<type [[Process.waitfor_result]]>>

<<signature [[Process.return]]>>
<<signature [[Process.exit]]>>
<<signature [[Process.waitfor]]>>
<<signature [[Process.s_of_unix_error]]>>
@

\subsection*{[[Prompt.mli]]}

%-------------------------------------------------------------

<<Prompt.mli>>=
<<signature [[Prompt.doprompt]]>>
<<signature [[Prompt.prompt]]>>

<<signature [[Prompt.pprompt]]>>
@

\subsection*{[[Runtime.mli]]}

%-------------------------------------------------------------

<<Runtime.mli>>=

<<type [[Runtime.varname]]>>
<<type [[Runtime.value]]>>
<<type [[Runtime.var]]>>

val string_of_var : var -> string

<<type [[Runtime.fn]]>>
val show_fn: fn -> string

<<type [[Runtime.thread]]>>
<<type [[Runtime.redir]]>>

<<type [[Runtime.waitstatus]]>>

(* globals *)

<<signature [[Runtime.globals]]>>
<<signature [[Runtime.fns]]>>
<<signature [[Runtime.runq]]>>

(* API *)

<<signature [[Runtime.cur]]>>
<<signature [[Runtime.push_list]]>>
<<signature [[Runtime.pop_list]]>>
<<signature [[Runtime.push_word]]>>
<<signature [[Runtime.pop_word]]>>
<<signature [[Runtime.push_redir]]>>
<<signature [[Runtime.pop_redir]]>>
<<signature [[Runtime.turf_redir]]>>
<<signature [[Runtime.doredir]]>>

<<signature [[Runtime.mk_thread]]>>
@

\subsection*{[[Status.mli]]}

%-------------------------------------------------------------

<<Status.mli>>=
(* helpers to manipulate the "status" special variable (see Var.ml) *)

<<signature [[Status.setstatus]]>>
<<signature [[Status.getstatus]]>>
<<signature [[Status.concstatus]]>>
<<signature [[Status.truestatus]]>>
@

\subsection*{[[Var.mli]]}

%-------------------------------------------------------------

<<Var.mli>>=
(* Helpers to manipulate rc shell variables *)

<<signature [[Var.gvlook]]>>
<<signature [[Var.vlook]]>>
<<signature [[Var.setvar]]>>
<<signature [[Var.vinit]]>>
@
