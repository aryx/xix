# -*- org -*-

* TODO

** rc/mk
TODO Can use rc/mk on principia and build and syncweb as well Editor.nw/Codemap.nw
  need implement globbing, subshell, etc.

** internals
TODO? use let* and let/ ? also doable to add in ocaml-light ?

** devinfra
SEMI? switch to precommit and ocamlformat? (but avoid lex/ yacc/ because of syncweb)
TODO more semgrep rules (forbid functors, labels, etc.)

** testinfra

* -----------------------------------------------------------

* 0.17 (Q4 2025) ()

** testinfra
- TODO Dockerfile.light can now compile also 5a/5c/5l/cpp
  thx to the removal of the use of 'as' in the .mll files
  that is not supported by ocaml-light ocamlllex

** internals
- use uppercase module filenames, split Main.ml/CLI.ml, and start
  to use capabilities for 5a/5c/5l/cpp

* 0.16 (Q3 2025) (Dockerfile.light)

** testinfra
- Finish Dockerfile.light that can compile mk/rc/lib_core/ with ocaml-light! 
  see ocaml-light/changes.txt for all the stuff needed

* 0.15 (Q2 2025) (Cap.ml, Dockerfile/Nix/Testo (testinfra), dune/merlin/ocamlformat (tools))
# Resume again after one year of inactivity due to my work on Semgrep.
# Bring again like last year good stuff I learned from Semgrep:
#  - Cap.ml! capabilities!! XiX can innovate not only on being far smaller, and
#    also have literate documents, but also because it uses capabilities in apps!
#  - Console.ml, Chan.ml (and UConsole.ml/UChan.ml)
#  - Dockerfile (and GHA) for reproducible tangible build instructions
#  - Nix (and GHA) for another reproducible tangible build instructions
#    and even cross-platform CI checks for Linux and macOS
#  - ppx_deriving (instead of ocamltarzan and OCaml.ml)
#  - Fpath.t (instead of Common.filename)
#  - dune (and good ocaml warnings and also far faster build time in //)
#  - merlin for code navigation (requires dune)
#  - Testo (snapshot-based testing)
#  - SEMI ocamlformat
#  - TODO let*, let/

** internals

- Start use ppx_deriving (which then require OCaml 4.09.1 but
  it should be doable to implement a poor's man deriving in ocaml-light)
  We generate some dummy show_xxx so that boostrap-mk.sh can still
  compile correctly the code (ppx_deriving is mostly used in Logs anyway)
- Copy Cap.ml from semgrep and start using capabilities!!! (and
  augmented semgrep.jsonnet to forbid Sys.xxx) (which then requires OCaml 4.0x
  but again it is doable to just skip any object constructs in ocaml light
  as capabilities are just a typechecking thing without runtime impact).
- capabilties: Cap.fork, Cap.exec, Cap.exit, Cap.chdir, Cap.stdout, Cap.argv
  and new Cap.env, Cap.open_in
- integrate Console.ml, CapConsole.ml, UConsole.ml from semgrep
- copy Chan.ml, UChan.ml, CapProcess, and CapFS.ml from semgrep
- Start use poor's man Fpath.ml instead of Common.filename
- Start use capitalized module for lib_core/commons/, mk/, shell/ (thx Martin)
- use dune as an additional way to build XiX which then allows to
  use merlin and code navigation in efuns!!
- use ocamlformat (just on some .mli for now)
- adapt the code to also work with ocaml-light! (remove some labels,
  remove some Int32/Int64 code, etc.)

** testinfra

- Dockerfile (Ubuntu because Alpine is failing for old OCaml versions)
  and docker.yml GHA (GitHub Actions) CI
- shell.nix Nix dev environment setup
  and nix.yml GHA CI
- start of use of Testo and snapshots for e2e testing of rc
- Dockerfile.light to compile again but using ocaml light!
  (my own fork of ocaml 1.07 (which is roughly caml-special-light since
  I've removed the objects part))

* -----------------------------------------------------------

* 0.14 (Q2 2024) (Logging, Testing, CI)

** mk works again (but need rc from plan9port (a.k.a. 9base in Linux))

** dev infra

- Logging using poor's man Logs.ml

* 0.13 (Q1 2024) (CI build and test and semgrep checks (testinfra))
# Resume after long hiatus (2019-2023) due to our move to Italy,
# the birth of Nathalie, and especially my work for Semgrep.
# Bring good stuff I learned from semgrep:
#  - GHA and CI regression testing
#  - Logs
#  - Semgrep checks (and semgrep.jsonnet)
#  - tests

** internals

- Started to use stdcompat for backward compatibility with
  old versions of OCaml.

** devinfra/testinfra

- Github Actions (GHA) checks to make sure xix compiles.
  At least it compiles with 3.10.0 (thx to stdcompat), 4.04.0, 4.14.0,
  and even 5.1.0!
- first semgrep checks in semgrep.jsonnet :) and semgrep GHA workflow.
- some basic tests (also enforced in GHA) in test.sh

* -----------------------------------------------------------

* Big pause to work on semgrep for 2019/2020/2021/2022/2023

* -----------------------------------------------------------


* 0.12 (Q4 2018) ()
# Move to Italy

* 0.11 (Q3 2018) (lib_gui?)

** internals
- use of merlin (mk .merlin) via Efuns

* 0.10 (Q2 2018) ()

* 0.9 (Q1 2018) ()
# GioGio at home a lot, big ear infections

(work on syncweb -web_to_tex and code indexing)

* -----------------------------------------------------------

* 0.8 (Q4 2017) (git algorithms)

diff3.ml
simpler diff_myers.ml

* 0.7 (Q3 2017) (git)

port of dulwich and ocaml-git, 2 clones of git, to ocaml(light).

Simplify code in ocaml-git by not using functors/lwt/mstruct/... 
and complete with new code derived from dulwich (clone of git in python)
or from entirely new code for the features not implemented by dulwich.


* 0.6 (Q2 2017) (rio and libdraw, import lib_core, lib_system)

port of rio using ocaml threads but relying on the original plan9 kernel.
basic terminal emulator.

port of libdraw, the userspace part, again relying on the original plan9 kernel
(draw/, geometry/, input/, and basic ui/ for menus)

binding to plan9 mount/bind and port of 9P protocol to ocaml (for rio)
(lib_system/)

import stdlib and organize better lib_core/ (collections/, string/, etc).

port more of the kernel C code to ocaml 
(core DS, concurrency, memory, process, interrupts, virtual memory,
scheduling, and timing chapters).

started lib_core/ 

* 0.5 (Q1 2017) (kernel start)
# Giogio birth!

minimal C kernel for Raspberry Pi (boot, malloc, libc, print) by
 selecting subset of 9/bcm/ and 9/port in plan9

minimal ocaml hello world linked in kernel
 by linking the byterun interpreter from ocaml light 1.07 to the
 minimal C kernel (incorporate more libc)

* -----------------------------------------------------------

* 0.4 (Q4 2016) (5c typechecker and basic code generator)

finish cpp
finish first port of 5c (typechecker and basic code generator)

* 0.3 (Q3 2016) (mk, rc, 5c parser, cpp)

port of mk
port of rc
port of 5c (just parser and dumper)
port of cpp

* 0.2 (Q2 2016) ()

* 0.1 (Q1 2016) (5l)

start of repository, mkfiles, skeleton

port of 5l
finish 5a

* -----------------------------------------------------------

* Alpha (Dec 2015) (5a + lex/yacc import)

port of 5a
import of yacc that I ported in may 2015
import of lex from OCaml.
import of lib_parsing/ from the modifications I made to lex and yacc.
