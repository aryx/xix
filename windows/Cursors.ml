(* Copyright 2017, 2025 Yoann Padioleau, see copyright.txt *)
open Common

open Cursor
open Point
open Rectangle

(*****************************************************************************)
(* Classic cursors *)
(*****************************************************************************)

(* See also 'arrow' defined in the kernel and in lib_graphics/input/cursor.ml *)

(* when create a new window (sweep()) *)
let crosscursor = {
  offset = { x = -7; y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0x03; 0xC0; 0x03; 0xC0; 0x03; 0xC0; 0x03; 0xC0;
       0x03; 0xC0; 0x03; 0xC0; 0xFF; 0xFF; 0xFF; 0xFF;
       0xFF; 0xFF; 0xFF; 0xFF; 0x03; 0xC0; 0x03; 0xC0;
       0x03; 0xC0; 0x03; 0xC0; 0x03; 0xC0; 0x03; 0xC0; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x01; 0x80; 0x01; 0x80; 0x01; 0x80;
       0x01; 0x80; 0x01; 0x80; 0x01; 0x80; 0x7F; 0xFE;
       0x7F; 0xFE; 0x01; 0x80; 0x01; 0x80; 0x01; 0x80;
       0x01; 0x80; 0x01; 0x80; 0x01; 0x80; 0x00; 0x00;
    |];
}

(* when move a window (drag()) *)
let boxcursor = {
  offset =  {x = -7; y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFF;
       0xFF; 0xFF; 0xF8; 0x1F; 0xF8; 0x1F; 0xF8; 0x1F;
       0xF8; 0x1F; 0xF8; 0x1F; 0xF8; 0x1F; 0xFF; 0xFF;
       0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x7F; 0xFE; 0x7F; 0xFE; 0x7F; 0xFE;
       0x70; 0x0E; 0x70; 0x0E; 0x70; 0x0E; 0x70; 0x0E;
       0x70; 0x0E; 0x70; 0x0E; 0x70; 0x0E; 0x70; 0x0E;
       0x7F; 0xFE; 0x7F; 0xFE; 0x7F; 0xFE; 0x00; 0x00; 
    |];
}


(* when select a window (point_to()) *)
let sightcursor = {
  offset =  {x = -7; y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0x1F; 0xF8; 0x3F; 0xFC; 0x7F; 0xFE; 0xFB; 0xDF;
       0xF3; 0xCF; 0xE3; 0xC7; 0xFF; 0xFF; 0xFF; 0xFF;
       0xFF; 0xFF; 0xFF; 0xFF; 0xE3; 0xC7; 0xF3; 0xCF;
       0x7B; 0xDF; 0x7F; 0xFE; 0x3F; 0xFC; 0x1F; 0xF8; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x0F; 0xF0; 0x31; 0x8C; 0x21; 0x84;
       0x41; 0x82; 0x41; 0x82; 0x41; 0x82; 0x7F; 0xFE;
       0x7F; 0xFE; 0x41; 0x82; 0x41; 0x82; 0x41; 0x82;
       0x21; 0x84; 0x31; 0x8C; 0x0F; 0xF0; 0x00; 0x00; 
    |];
}


(* for holding mode *)
let _whitearrow = {
  offset =  {x = 0; y = 0; };
  clr = Cursor.ints_to_bytes
    [| 0xFF; 0xFF; 0xFF; 0xFF; 0xFF; 0xFE; 0xFF; 0xFC; 
       0xFF; 0xF0; 0xFF; 0xF0; 0xFF; 0xF8; 0xFF; 0xFC; 
       0xFF; 0xFE; 0xFF; 0xFF; 0xFF; 0xFE; 0xFF; 0xFC; 
       0xF3; 0xF8; 0xF1; 0xF0; 0xE0; 0xE0; 0xC0; 0x40; 
    |];
  set = Cursor.ints_to_bytes
    [| 0xFF; 0xFF; 0xFF; 0xFF; 0xC0; 0x06; 0xC0; 0x1C; 
       0xC0; 0x30; 0xC0; 0x30; 0xC0; 0x38; 0xC0; 0x1C; 
       0xC0; 0x0E; 0xC0; 0x07; 0xCE; 0x0E; 0xDF; 0x1C; 
       0xD3; 0xB8; 0xF1; 0xF0; 0xE0; 0xE0; 0xC0; 0x40; 
    |];
}

(* ?? *)
let _query = {
  offset =  {x = -7;y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0x0f; 0xf0; 0x1f; 0xf8; 0x3f; 0xfc; 0x7f; 0xfe; 
       0x7c; 0x7e; 0x78; 0x7e; 0x00; 0xfc; 0x01; 0xf8; 
       0x03; 0xf0; 0x07; 0xe0; 0x07; 0xc0; 0x07; 0xc0; 
       0x07; 0xc0; 0x07; 0xc0; 0x07; 0xc0; 0x07; 0xc0; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x0f; 0xf0; 0x1f; 0xf8; 0x3c; 0x3c; 
       0x38; 0x1c; 0x00; 0x3c; 0x00; 0x78; 0x00; 0xf0; 
       0x01; 0xe0; 0x03; 0xc0; 0x03; 0x80; 0x03; 0x80; 
       0x00; 0x00; 0x03; 0x80; 0x03; 0x80; 0x00; 0x00; 
    |];
}

(*****************************************************************************)
(* Border and corner cursors *)
(*****************************************************************************)

type corner = 
  | TopLeft    | Top    | TopRight
  | Left                | Right
  | BottomLeft | Bottom | BottomRight

type portion = Inf | Middle | Sup

let portion x low high =
  (* normalize to low *)
  let x = x - low in
  let high = high - low in
  (* TODO: unused low? *)
  let _low = 0 in

  match () with
  | _ when x < 20 -> Inf
  | _ when x > high - 20 -> Sup
  | _ -> Middle

let which_corner r p =
  let left_right = portion p.x r.min.x r.max.x in
  let bottom_top = portion p.y r.min.y r.max.y in
  match left_right, bottom_top with
  | Inf, Inf -> TopLeft
  | Inf, Middle -> Left
  | Inf, Sup -> BottomLeft
  | Middle, Inf -> Top
  | Middle, Middle -> 
    raise (Impossible "which_corner: pt_on_frame should not generate this")
  | Middle, Sup -> Bottom
  | Sup, Inf -> TopRight
  | Sup, Middle -> Right
  | Sup, Sup -> BottomRight


let tl = {
  offset =  {x = -4; y = -4; };
  clr = Cursor.ints_to_bytes
    [| 0xfe; 0x00; 0x82; 0x00; 0x8c; 0x00; 0x87; 0xff; 
       0xa0; 0x01; 0xb0; 0x01; 0xd0; 0x01; 0x11; 0xff; 
       0x11; 0x00; 0x11; 0x00; 0x11; 0x00; 0x11; 0x00; 
       0x11; 0x00; 0x11; 0x00; 0x11; 0x00; 0x1f; 0x00; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x7c; 0x00; 0x70; 0x00; 0x78; 0x00; 
       0x5f; 0xfe; 0x4f; 0xfe; 0x0f; 0xfe; 0x0e; 0x00; 
       0x0e; 0x00; 0x0e; 0x00; 0x0e; 0x00; 0x0e; 0x00; 
       0x0e; 0x00; 0x0e; 0x00; 0x0e; 0x00; 0x00; 0x00; 
    |];
}

let t = {
  offset =  {x = -7; y = -8; };
  clr = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x00; 0x00; 0x03; 0x80; 0x06; 0xc0; 
       0x1c; 0x70; 0x10; 0x10; 0x0c; 0x60; 0xfc; 0x7f; 
       0x80; 0x01; 0x80; 0x01; 0x80; 0x01; 0xff; 0xff; 
       0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x01; 0x00; 
       0x03; 0x80; 0x0f; 0xe0; 0x03; 0x80; 0x03; 0x80; 
       0x7f; 0xfe; 0x7f; 0xfe; 0x7f; 0xfe; 0x00; 0x00; 
       0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 
    |];
}

let tr = {
  offset =  {x = -11; y = -4; };
  clr = Cursor.ints_to_bytes
    [| 0x00; 0x7f; 0x00; 0x41; 0x00; 0x31; 0xff; 0xe1; 
       0x80; 0x05; 0x80; 0x0d; 0x80; 0x0b; 0xff; 0x88; 
       0x00; 0x88; 0x0; 0x88; 0x00; 0x88; 0x00; 0x88; 
       0x00; 0x88; 0x00; 0x88; 0x00; 0x88; 0x00; 0xf8; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x00; 0x3e; 0x00; 0x0e; 0x00; 0x1e; 
       0x7f; 0xfa; 0x7f; 0xf2; 0x7f; 0xf0; 0x00; 0x70; 
       0x00; 0x70; 0x00; 0x70; 0x00; 0x70; 0x00; 0x70; 
       0x00; 0x70; 0x00; 0x70; 0x00; 0x70; 0x00; 0x00; 
    |];
}

let r = {
  offset =  {x = -8; y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0x07; 0xc0; 0x04; 0x40; 0x04; 0x40; 0x04; 0x58; 
       0x04; 0x68; 0x04; 0x6c; 0x04; 0x06; 0x04; 0x02; 
       0x04; 0x06; 0x04; 0x6c; 0x04; 0x68; 0x04; 0x58; 
       0x04; 0x40; 0x04; 0x40; 0x04; 0x40; 0x07; 0xc0; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x03; 0x80; 0x03; 0x80; 0x03; 0x80; 
       0x03; 0x90; 0x03; 0x90; 0x03; 0xf8; 0x03; 0xfc; 
       0x03; 0xf8; 0x03; 0x90; 0x03; 0x90; 0x03; 0x80; 
       0x03; 0x80; 0x03; 0x80; 0x03; 0x80; 0x00; 0x00; 
    |];
}

let br = {
  offset =  {x = -11; y = -11; };
  clr = Cursor.ints_to_bytes
    [| 0x00; 0xf8; 0x00; 0x88; 0x00; 0x88; 0x00; 0x88; 
       0x00; 0x88; 0x00; 0x88; 0x00; 0x88; 0x00; 0x88; 
       0xff; 0x88; 0x80; 0x0b; 0x80; 0x0d; 0x80; 0x05; 
       0xff; 0xe1; 0x00; 0x31; 0x00; 0x41; 0x00; 0x7f; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x00; 0x70; 0x00; 0x70; 0x00; 0x70; 
       0x0; 0x70; 0x00; 0x70; 0x00; 0x70; 0x00; 0x70; 
       0x00; 0x70; 0x7f; 0xf0; 0x7f; 0xf2; 0x7f; 0xfa; 
       0x00; 0x1e; 0x00; 0x0e; 0x00; 0x3e; 0x00; 0x00; 
    |];
}

let b = {
  offset =  {x = -7; y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 
       0xff; 0xff; 0x80; 0x01; 0x80; 0x01; 0x80; 0x01; 
       0xfc; 0x7f; 0x0c; 0x60; 0x10; 0x10; 0x1c; 0x70; 
       0x06; 0xc0; 0x03; 0x80; 0x00; 0x00; 0x00; 0x00; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 
       0x00; 0x00; 0x7f; 0xfe; 0x7f; 0xfe; 0x7f; 0xfe; 
       0x03; 0x80; 0x03; 0x80; 0x0f; 0xe0; 0x03; 0x80; 
       0x01; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 0x00; 
    |];
}

let bl = {
  offset =  {x = -4; y = -11; };
  clr = Cursor.ints_to_bytes
    [| 0x1f; 0x00; 0x11; 0x00; 0x11; 0x00; 0x11; 0x00; 
       0x11; 0x00; 0x11; 0x00; 0x11; 0x00; 0x11; 0x00; 
       0x11; 0xff; 0xd0; 0x01; 0xb0; 0x01; 0xa0; 0x01; 
       0x87; 0xff; 0x8c; 0x00; 0x82; 0x00; 0xfe; 0x00; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x0e; 0x00; 0x0e; 0x00; 0x0e; 0x00; 
       0x0e; 0x00; 0x0e; 0x00; 0x0e; 0x00; 0x0e; 0x00; 
       0x0e; 0x00; 0x0f; 0xfe; 0x4f; 0xfe; 0x5f; 0xfe; 
       0x78; 0x00; 0x70; 0x00; 0x7c; 0x00; 0x00; 0x0; 
    |];
}

let l = {
  offset =  {x = -7; y = -7; };
  clr = Cursor.ints_to_bytes
    [| 0x03; 0xe0; 0x02; 0x20; 0x02; 0x20; 0x1a; 0x20; 
       0x16; 0x20; 0x36; 0x20; 0x60; 0x20; 0x40; 0x20; 
       0x60; 0x20; 0x36; 0x20; 0x16; 0x20; 0x1a; 0x20; 
       0x02; 0x20; 0x02; 0x20; 0x02; 0x20; 0x03; 0xe0; 
    |];
  set = Cursor.ints_to_bytes
    [| 0x00; 0x00; 0x01; 0xc0; 0x01; 0xc0; 0x01; 0xc0; 
       0x09; 0xc0; 0x09; 0xc0; 0x1f; 0xc0; 0x3f; 0xc0; 
       0x1f; 0xc0; 0x09; 0xc0; 0x09; 0xc0; 0x01; 0xc0; 
       0x01; 0xc0; 0x01; 0xc0; 0x01; 0xc0; 0x00; 0x00; 
    |];
}

let which_corner_cursor rect p =
  let corner = which_corner rect p in
  match corner with
  | TopLeft -> tl
  | Top -> t
  | TopRight -> tr
  | Left -> l
  | Right -> r
  | BottomLeft -> bl
  | Bottom -> b
  | BottomRight -> br
